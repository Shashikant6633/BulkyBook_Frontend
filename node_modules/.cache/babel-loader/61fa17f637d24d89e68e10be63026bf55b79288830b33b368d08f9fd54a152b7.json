{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sbhagwanshinde\\\\Desktop\\\\mini proj\\\\my-app\\\\src\\\\components\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { createContext, useContext, useReducer, useEffect } from 'react';\n\n// // Define the initial state for the cart\n// const initialCartState = {\n//   cartItems: [],\n// };\n\n// // Define actions to manipulate the cart state\n// const cartReducer = (state, action) => {\n//   switch (action.type) {\n//     case 'ADD_TO_CART':\n//       return {\n//         ...state,\n//         cartItems: [...state.cartItems, action.payload],\n//       };\n//     case 'UPDATE_QUANTITY':\n//       return {\n//         ...state,\n//         cartItems: state.cartItems.map((item) =>\n//           item.id === action.payload.id\n//             ? { ...item, count: action.payload.count }\n//             : item\n//         ),\n//       };\n//     case 'REMOVE_FROM_CART':\n//       return {\n//         ...state,\n//         cartItems: state.cartItems.filter((item) => item.id !== action.payload),\n//       };\n//     case 'PLUS_ONE':\n//       return {\n//         ...state,\n//         cartItems: state.cartItems.map((item) =>\n//           item.id === action.payload ? { ...item, count: item.count + 1 } : item\n//         ),\n//       };\n//     case 'MINUS_ONE':\n//       return {\n//         ...state,\n//         cartItems: state.cartItems.map((item) =>\n//           item.id === action.payload && item.count > 1 ? { ...item, count: item.count - 1 } : item\n//         ),\n//       };\n//     case 'LOAD_CART':\n//       return {\n//         ...state,\n//         cartItems: action.payload,\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\n// // Create the CartContext\n// const CartContext = createContext();\n\n// // Create the CartProvider component\n// export const CartProvider = ({ children }) => {\n//   const [state, dispatch] = useReducer(cartReducer, initialCartState);\n\n//   // Load data from local storage on component mount\n//   useEffect(() => {\n//     const savedCart = localStorage.getItem('cart');\n//     if (savedCart) {\n//       dispatch({ type: 'LOAD_CART', payload: JSON.parse(savedCart) });\n//     }\n//   }, []); // Empty dependency array to run only once on mount\n\n//   // Save data to local storage whenever cartItems change\n//   useEffect(() => {\n//     localStorage.setItem('cart', JSON.stringify(state.cartItems));\n//   }, [state.cartItems]);\n\n//   const addToCart = (item) => {\n//     dispatch({ type: 'ADD_TO_CART', payload: item });\n//   };\n\n//   const updateQuantity = (id, count) => {\n//     dispatch({ type: 'UPDATE_QUANTITY', payload: { id, count } });\n//   };\n\n//   const removeFromCart = (id) => {\n//     dispatch({ type: 'REMOVE_FROM_CART', payload: id });\n//   };\n\n//   const handlePlus = (id) => {\n//     dispatch({ type: 'PLUS_ONE', payload: id });\n//   };\n\n//   const handleMinus = (id) => {\n//     dispatch({ type: 'MINUS_ONE', payload: id });\n//   };\n\n//   return (\n//     <CartContext.Provider\n//       value={{\n//         cartItems: state.cartItems,\n//         addToCart,\n//         updateQuantity,\n//         removeFromCart,\n//         handlePlus,\n//         handleMinus\n//       }}\n//     >\n//       {children}\n//     </CartContext.Provider>\n//   );\n// };\n\n// // Create a custom hook to use the CartContext\n// export const useCart = () => {\n//   return useContext(CartContext);\n// };\n\n// import React, { createContext, useContext, useReducer, useEffect } from 'react';\n\n// // Define the initial state for the cart\n// const initialCartState = {\n//   cartItems: [],\n// };\n\n// // Define actions to manipulate the cart state\n// const cartReducer = (state, action) => {\n//   switch (action.type) {\n//     case 'ADD_TO_CART':\n//       return {\n//         ...state,\n//         cartItems: [...state.cartItems, action.payload],\n//       };\n//     case 'UPDATE_QUANTITY':\n//       return {\n//         ...state,\n//         cartItems: state.cartItems.map((item) =>\n//           item.id === action.payload.id\n//             ? { ...item, count: action.payload.count }\n//             : item\n//         ),\n//       };\n//     case 'REMOVE_FROM_CART':\n//       return {\n//         ...state,\n//         cartItems: state.cartItems.filter((item) => item.id !== action.payload),\n//       };\n//     case 'PLUS_ONE':\n//       return {\n//         ...state,\n//         cartItems: state.cartItems.map((item) =>\n//           item.id === action.payload ? { ...item, count: item.count + 1 } : item\n//         ),\n//       };\n//     case 'MINUS_ONE':\n//       return {\n//         ...state,\n//         cartItems: state.cartItems.map((item) =>\n//           item.id === action.payload && item.count > 1 ? { ...item, count: item.count - 1 } : item\n//         ),\n//       };\n//     case 'LOAD_CART':\n//       return {\n//         ...state,\n//         cartItems: action.payload,\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\n// // Create the CartContext\n// const CartContext = createContext();\n\n// // Create the CartProvider component\n// export const CartProvider = ({ children }) => {\n//   const [state, dispatch] = useReducer(cartReducer, initialCartState);\n\n//   // Load data from local storage on component mount\n//   useEffect(() => {\n//     const savedCart = localStorage.getItem('cart');\n//     if (savedCart) {\n//       dispatch({ type: 'LOAD_CART', payload: JSON.parse(savedCart) });\n//     }\n//   }, []);\n\n//   // Save data to local storage whenever cartItems change\n//   useEffect(() => {\n//     localStorage.setItem('cart', JSON.stringify(state.cartItems));\n//   }, [state.cartItems]);\n\n//   const apiUrl = 'http://localhost:5120/api/Cart';\n\n//   const addToCart = async (item) => {\n//     try {\n//       const response = await fetch(apiUrl, {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//           // Add any authentication headers if needed\n//         },\n//         body: JSON.stringify(item),\n//       });\n\n//       if (response.ok) {\n//         // Item added successfully to the backend, now update the local state\n//         dispatch({ type: 'ADD_TO_CART', payload: item });\n//       } else {\n//         console.error('Failed to add item to cart');\n//       }\n//     } catch (error) {\n//       console.error('Network error while adding item to cart', error);\n//     }\n//   };\n\n//   // Add similar API calls for other actions (updateQuantity, removeFromCart, handlePlus, handleMinus)\n\n//   return (\n//     <CartContext.Provider\n//       value={{\n//         cartItems: state.cartItems,\n//         addToCart,\n//         // Add other action functions here\n//       }}\n//     >\n//       {children}\n//     </CartContext.Provider>\n//   );\n// };\n\n// // Create a custom hook to use the CartContext\n// export const useCart = () => {\n//   return useContext(CartContext);\n// };\n\n// import React, { createContext, useContext, useReducer, useEffect } from 'react';\n\n// const CartContext = createContext();\n\n// const cartReducer = (state, action) => {\n//     switch (action.type) {\n//       case 'ADD_TO_CART':\n//         return [...state, action.payload];\n\n//       case 'REMOVE_FROM_CART':\n//         return state.filter(item => item.id !== action.payload);\n\n//         case 'PLUS_ONE':\n//             return {\n//               ...state,\n//               cartItems: state.cartItems.map((item) =>\n//                 item.id === action.payload ? { ...item, count: item.count + 1 } : item\n//               ),\n//             };\n//           case 'MINUS_ONE':\n//             return {\n//               ...state,\n//               cartItems: state.cartItems.map((item) =>\n//                 item.id === action.payload && item.count > 1 ? { ...item, count: item.count - 1 } : item\n//               ),\n//             };\n//           case 'LOAD_CART':\n//             return {\n//               ...state,\n//               cartItems: action.payload,\n//             };\n\n//       default:\n//         return state;\n//     }\n//   };\n\n// const CartProvider = ({ children }) => {\n//   const [cartItems, dispatch] = useReducer(cartReducer, [], (initial) => {\n//     // Load cart items from local storage on initial render\n//     const storedCart = localStorage.getItem('cart');\n//     return storedCart ? JSON.parse(storedCart) : initial;\n//   });\n\n//   // Update local storage whenever the cart items change\n//   useEffect(() => {\n//     localStorage.setItem('cart', JSON.stringify(cartItems));\n//   }, [cartItems]);\n\n//   const addToCart = (product) => {\n//     dispatch({ type: 'ADD_TO_CART', payload: product });\n//   };\n\n//   const handlePlus = (id) => {\n//         dispatch({ type: 'PLUS_ONE', payload: id });\n//       };\n\n//       const handleMinus = (id) => {\n//         dispatch({ type: 'MINUS_ONE', payload: id });\n//       };  \n\n//   const removeFromCart = (productId) => {\n//     dispatch({ type: 'REMOVE_FROM_CART', payload: productId });\n//   };\n\n//   return (\n//     <CartContext.Provider value={{ cartItems, addToCart, removeFromCart }}>\n//       {children}\n//     </CartContext.Provider>\n//   );\n// };\n\n// const useCart = () => {\n//   const context = useContext(CartContext);\n//   if (!context) {\n//     throw new Error('useCart must be used within a CartProvider');\n//   }\n//   return context;\n// };\n\n// export { CartProvider, useCart };\n\n//Working Code\n\n// import React, { createContext, useContext, useReducer,useEffect } from 'react';\n\n// // Create a context\n// const CartContext = createContext();\n\n// // Define your cart reducer function\n// const cartReducer = (state, action) => {\n//   switch (action.type) {\n\n//     case 'ADD_TO_CART':\n//         return [...state, action.payload];\n\n//       case 'REMOVE_FROM_CART':\n//         return state.filter(item => item.id !== action.payload);\n\n//     case 'HANDLE_PLUS':\n//       // Increment the quantity of an item in the cart\n//       return state.map((item) =>\n//         item.id === action.payload ? { ...item, count: item.count + 1 } : item\n//       );\n\n//     case 'HANDLE_MINUS':\n//       // Decrement the quantity of an item in the cart\n//       return state.map((item) =>\n//         item.id === action.payload ? { ...item, count: Math.max(1, item.count - 1) } : item\n//       );\n\n//     default:\n//       return state;\n//   }\n// };\n\n// const loadCartFromLocalStorage = () => {\n//     const cartData = localStorage.getItem('cart');\n//     return cartData ? JSON.parse(cartData) : [];\n//   };\n\n//   const CartProvider = ({ children }) => {\n//     const [cartItems, dispatch] = useReducer(cartReducer, [], loadCartFromLocalStorage);\n\n//     useEffect(() => {\n//       localStorage.setItem('cart', JSON.stringify(cartItems));\n//     }, [cartItems]);\n\n//     const contextValue = {\n//       cartItems,\n//       addToCart: (item) => dispatch({ type: 'ADD_TO_CART', payload: item }),\n//       removeFromCart: (itemId) => dispatch({ type: 'REMOVE_FROM_CART', payload: itemId }),\n//       handlePlus: (itemId) => dispatch({ type: 'HANDLE_PLUS', payload: itemId }),\n//       handleMinus: (itemId) => dispatch({ type: 'HANDLE_MINUS', payload: itemId }),\n//     };\n\n//     return <CartContext.Provider value={contextValue}>{children}</CartContext.Provider>;\n//   };\n\n//   const useCart = () => {\n//     const context = useContext(CartContext);\n//     if (!context) {\n//       throw new Error('useCart must be used within a CartProvider');\n//     }\n//     return context;\n//   };\n\n//   export { CartProvider, useCart };\n\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport axios from 'axios';\n\n// Action types\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ADD_TO_CART = 'ADD_TO_CART';\nconst REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nconst INCREASE_QUANTITY = 'INCREASE_QUANTITY';\nconst DECREASE_QUANTITY = 'DECREASE_QUANTITY';\nconst SET_CART_ITEMS = 'SET_CART_ITEMS';\n\n// Initial state\nconst initialState = {\n  cartItems: []\n};\n\n// Context\nconst CartContext = /*#__PURE__*/createContext();\n\n// Reducer\nconst cartReducer = (state, action) => {\n  switch (action.type) {\n    case ADD_TO_CART:\n      return {\n        ...state,\n        cartItems: [...state.cartItems, action.payload]\n      };\n    case REMOVE_FROM_CART:\n      return {\n        ...state,\n        cartItems: state.cartItems.filter(item => item.id !== action.payload)\n      };\n    case INCREASE_QUANTITY:\n      return {\n        ...state,\n        cartItems: state.cartItems.map(item => item.id === action.payload ? {\n          ...item,\n          count: item.count + 1\n        } : item)\n      };\n    case DECREASE_QUANTITY:\n      return {\n        ...state,\n        cartItems: state.cartItems.map(item => item.id === action.payload ? {\n          ...item,\n          count: item.count - 1\n        } : item)\n      };\n    case SET_CART_ITEMS:\n      return {\n        ...state,\n        cartItems: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\n// CartProvider component\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(cartReducer, initialState);\n\n  // Fetch cart items from the database on component mount\n  useEffect(() => {\n    const fetchCartItems = async () => {\n      try {\n        const response = await axios.get('http://localhost:5120/api/CartItem');\n        dispatch({\n          type: SET_CART_ITEMS,\n          payload: response.data\n        });\n      } catch (error) {\n        console.error('Error fetching cart items:', error);\n      }\n    };\n    fetchCartItems();\n  }, []);\n\n  // Add other actions and functions here\n\n  // Function to update quantity in the database\n  const updateQuantity = async (productId, newQuantity) => {\n    try {\n      const response = await axios.put(`http://localhost:5120/api/cart/${productId}`, {\n        quantity: newQuantity\n      });\n      if (response.data.success) {\n        // Optionally, you can dispatch an action to update the local state\n        // dispatch({ type: UPDATE_QUANTITY, payload: { productId, newQuantity } });\n        console.log('Quantity updated successfully');\n      } else {\n        console.error('Failed to update quantity');\n      }\n    } catch (error) {\n      console.error('Error updating quantity:', error);\n    }\n  };\n\n  // Expose the state and relevant functions\n  const contextValue = {\n    cartItems: state.cartItems,\n    addToCart: item => dispatch({\n      type: ADD_TO_CART,\n      payload: item\n    }),\n    removeFromCart: productId => dispatch({\n      type: REMOVE_FROM_CART,\n      payload: productId\n    }),\n    increaseQuantity: productId => dispatch({\n      type: INCREASE_QUANTITY,\n      payload: productId\n    }),\n    decreaseQuantity: productId => dispatch({\n      type: DECREASE_QUANTITY,\n      payload: productId\n    }),\n    updateQuantity\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 506,\n    columnNumber: 10\n  }, this);\n};\n\n// Custom hook to use the cart context\n_s(CartProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n};\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","axios","jsxDEV","_jsxDEV","ADD_TO_CART","REMOVE_FROM_CART","INCREASE_QUANTITY","DECREASE_QUANTITY","SET_CART_ITEMS","initialState","cartItems","CartContext","cartReducer","state","action","type","payload","filter","item","id","map","count","CartProvider","children","_s","dispatch","fetchCartItems","response","get","data","error","console","updateQuantity","productId","newQuantity","put","quantity","success","log","contextValue","addToCart","removeFromCart","increaseQuantity","decreaseQuantity","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/sbhagwanshinde/Desktop/mini proj/my-app/src/components/CartContext.js"],"sourcesContent":["\r\n// import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\n\r\n// // Define the initial state for the cart\r\n// const initialCartState = {\r\n//   cartItems: [],\r\n// };\r\n\r\n// // Define actions to manipulate the cart state\r\n// const cartReducer = (state, action) => {\r\n//   switch (action.type) {\r\n//     case 'ADD_TO_CART':\r\n//       return {\r\n//         ...state,\r\n//         cartItems: [...state.cartItems, action.payload],\r\n//       };\r\n//     case 'UPDATE_QUANTITY':\r\n//       return {\r\n//         ...state,\r\n//         cartItems: state.cartItems.map((item) =>\r\n//           item.id === action.payload.id\r\n//             ? { ...item, count: action.payload.count }\r\n//             : item\r\n//         ),\r\n//       };\r\n//     case 'REMOVE_FROM_CART':\r\n//       return {\r\n//         ...state,\r\n//         cartItems: state.cartItems.filter((item) => item.id !== action.payload),\r\n//       };\r\n//     case 'PLUS_ONE':\r\n//       return {\r\n//         ...state,\r\n//         cartItems: state.cartItems.map((item) =>\r\n//           item.id === action.payload ? { ...item, count: item.count + 1 } : item\r\n//         ),\r\n//       };\r\n//     case 'MINUS_ONE':\r\n//       return {\r\n//         ...state,\r\n//         cartItems: state.cartItems.map((item) =>\r\n//           item.id === action.payload && item.count > 1 ? { ...item, count: item.count - 1 } : item\r\n//         ),\r\n//       };\r\n//     case 'LOAD_CART':\r\n//       return {\r\n//         ...state,\r\n//         cartItems: action.payload,\r\n//       };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// // Create the CartContext\r\n// const CartContext = createContext();\r\n\r\n// // Create the CartProvider component\r\n// export const CartProvider = ({ children }) => {\r\n//   const [state, dispatch] = useReducer(cartReducer, initialCartState);\r\n\r\n//   // Load data from local storage on component mount\r\n//   useEffect(() => {\r\n//     const savedCart = localStorage.getItem('cart');\r\n//     if (savedCart) {\r\n//       dispatch({ type: 'LOAD_CART', payload: JSON.parse(savedCart) });\r\n//     }\r\n//   }, []); // Empty dependency array to run only once on mount\r\n\r\n//   // Save data to local storage whenever cartItems change\r\n//   useEffect(() => {\r\n//     localStorage.setItem('cart', JSON.stringify(state.cartItems));\r\n//   }, [state.cartItems]);\r\n\r\n//   const addToCart = (item) => {\r\n//     dispatch({ type: 'ADD_TO_CART', payload: item });\r\n//   };\r\n\r\n//   const updateQuantity = (id, count) => {\r\n//     dispatch({ type: 'UPDATE_QUANTITY', payload: { id, count } });\r\n//   };\r\n\r\n//   const removeFromCart = (id) => {\r\n//     dispatch({ type: 'REMOVE_FROM_CART', payload: id });\r\n//   };\r\n\r\n//   const handlePlus = (id) => {\r\n//     dispatch({ type: 'PLUS_ONE', payload: id });\r\n//   };\r\n\r\n//   const handleMinus = (id) => {\r\n//     dispatch({ type: 'MINUS_ONE', payload: id });\r\n//   };\r\n\r\n//   return (\r\n//     <CartContext.Provider\r\n//       value={{\r\n//         cartItems: state.cartItems,\r\n//         addToCart,\r\n//         updateQuantity,\r\n//         removeFromCart,\r\n//         handlePlus,\r\n//         handleMinus\r\n//       }}\r\n//     >\r\n//       {children}\r\n//     </CartContext.Provider>\r\n//   );\r\n// };\r\n\r\n// // Create a custom hook to use the CartContext\r\n// export const useCart = () => {\r\n//   return useContext(CartContext);\r\n// };\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\n\r\n// // Define the initial state for the cart\r\n// const initialCartState = {\r\n//   cartItems: [],\r\n// };\r\n\r\n// // Define actions to manipulate the cart state\r\n// const cartReducer = (state, action) => {\r\n//   switch (action.type) {\r\n//     case 'ADD_TO_CART':\r\n//       return {\r\n//         ...state,\r\n//         cartItems: [...state.cartItems, action.payload],\r\n//       };\r\n//     case 'UPDATE_QUANTITY':\r\n//       return {\r\n//         ...state,\r\n//         cartItems: state.cartItems.map((item) =>\r\n//           item.id === action.payload.id\r\n//             ? { ...item, count: action.payload.count }\r\n//             : item\r\n//         ),\r\n//       };\r\n//     case 'REMOVE_FROM_CART':\r\n//       return {\r\n//         ...state,\r\n//         cartItems: state.cartItems.filter((item) => item.id !== action.payload),\r\n//       };\r\n//     case 'PLUS_ONE':\r\n//       return {\r\n//         ...state,\r\n//         cartItems: state.cartItems.map((item) =>\r\n//           item.id === action.payload ? { ...item, count: item.count + 1 } : item\r\n//         ),\r\n//       };\r\n//     case 'MINUS_ONE':\r\n//       return {\r\n//         ...state,\r\n//         cartItems: state.cartItems.map((item) =>\r\n//           item.id === action.payload && item.count > 1 ? { ...item, count: item.count - 1 } : item\r\n//         ),\r\n//       };\r\n//     case 'LOAD_CART':\r\n//       return {\r\n//         ...state,\r\n//         cartItems: action.payload,\r\n//       };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// // Create the CartContext\r\n// const CartContext = createContext();\r\n\r\n// // Create the CartProvider component\r\n// export const CartProvider = ({ children }) => {\r\n//   const [state, dispatch] = useReducer(cartReducer, initialCartState);\r\n\r\n//   // Load data from local storage on component mount\r\n//   useEffect(() => {\r\n//     const savedCart = localStorage.getItem('cart');\r\n//     if (savedCart) {\r\n//       dispatch({ type: 'LOAD_CART', payload: JSON.parse(savedCart) });\r\n//     }\r\n//   }, []);\r\n\r\n//   // Save data to local storage whenever cartItems change\r\n//   useEffect(() => {\r\n//     localStorage.setItem('cart', JSON.stringify(state.cartItems));\r\n//   }, [state.cartItems]);\r\n\r\n//   const apiUrl = 'http://localhost:5120/api/Cart';\r\n\r\n//   const addToCart = async (item) => {\r\n//     try {\r\n//       const response = await fetch(apiUrl, {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//           // Add any authentication headers if needed\r\n//         },\r\n//         body: JSON.stringify(item),\r\n//       });\r\n\r\n//       if (response.ok) {\r\n//         // Item added successfully to the backend, now update the local state\r\n//         dispatch({ type: 'ADD_TO_CART', payload: item });\r\n//       } else {\r\n//         console.error('Failed to add item to cart');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Network error while adding item to cart', error);\r\n//     }\r\n//   };\r\n\r\n//   // Add similar API calls for other actions (updateQuantity, removeFromCart, handlePlus, handleMinus)\r\n\r\n//   return (\r\n//     <CartContext.Provider\r\n//       value={{\r\n//         cartItems: state.cartItems,\r\n//         addToCart,\r\n//         // Add other action functions here\r\n//       }}\r\n//     >\r\n//       {children}\r\n//     </CartContext.Provider>\r\n//   );\r\n// };\r\n\r\n// // Create a custom hook to use the CartContext\r\n// export const useCart = () => {\r\n//   return useContext(CartContext);\r\n// };\r\n\r\n\r\n\r\n\r\n\r\n// import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\n\r\n// const CartContext = createContext();\r\n\r\n// const cartReducer = (state, action) => {\r\n//     switch (action.type) {\r\n//       case 'ADD_TO_CART':\r\n//         return [...state, action.payload];\r\n  \r\n//       case 'REMOVE_FROM_CART':\r\n//         return state.filter(item => item.id !== action.payload);\r\n\r\n//         case 'PLUS_ONE':\r\n//             return {\r\n//               ...state,\r\n//               cartItems: state.cartItems.map((item) =>\r\n//                 item.id === action.payload ? { ...item, count: item.count + 1 } : item\r\n//               ),\r\n//             };\r\n//           case 'MINUS_ONE':\r\n//             return {\r\n//               ...state,\r\n//               cartItems: state.cartItems.map((item) =>\r\n//                 item.id === action.payload && item.count > 1 ? { ...item, count: item.count - 1 } : item\r\n//               ),\r\n//             };\r\n//           case 'LOAD_CART':\r\n//             return {\r\n//               ...state,\r\n//               cartItems: action.payload,\r\n//             };\r\n  \r\n//       default:\r\n//         return state;\r\n//     }\r\n//   };\r\n  \r\n\r\n// const CartProvider = ({ children }) => {\r\n//   const [cartItems, dispatch] = useReducer(cartReducer, [], (initial) => {\r\n//     // Load cart items from local storage on initial render\r\n//     const storedCart = localStorage.getItem('cart');\r\n//     return storedCart ? JSON.parse(storedCart) : initial;\r\n//   });\r\n\r\n//   // Update local storage whenever the cart items change\r\n//   useEffect(() => {\r\n//     localStorage.setItem('cart', JSON.stringify(cartItems));\r\n//   }, [cartItems]);\r\n\r\n//   const addToCart = (product) => {\r\n//     dispatch({ type: 'ADD_TO_CART', payload: product });\r\n//   };\r\n\r\n//   const handlePlus = (id) => {\r\n//         dispatch({ type: 'PLUS_ONE', payload: id });\r\n//       };\r\n    \r\n//       const handleMinus = (id) => {\r\n//         dispatch({ type: 'MINUS_ONE', payload: id });\r\n//       };  \r\n\r\n//   const removeFromCart = (productId) => {\r\n//     dispatch({ type: 'REMOVE_FROM_CART', payload: productId });\r\n//   };\r\n\r\n//   return (\r\n//     <CartContext.Provider value={{ cartItems, addToCart, removeFromCart }}>\r\n//       {children}\r\n//     </CartContext.Provider>\r\n//   );\r\n// };\r\n\r\n// const useCart = () => {\r\n//   const context = useContext(CartContext);\r\n//   if (!context) {\r\n//     throw new Error('useCart must be used within a CartProvider');\r\n//   }\r\n//   return context;\r\n// };\r\n\r\n// export { CartProvider, useCart };\r\n\r\n\r\n//Working Code\r\n\r\n\r\n// import React, { createContext, useContext, useReducer,useEffect } from 'react';\r\n\r\n// // Create a context\r\n// const CartContext = createContext();\r\n\r\n// // Define your cart reducer function\r\n// const cartReducer = (state, action) => {\r\n//   switch (action.type) {\r\n\r\n//     case 'ADD_TO_CART':\r\n//         return [...state, action.payload];\r\n  \r\n//       case 'REMOVE_FROM_CART':\r\n//         return state.filter(item => item.id !== action.payload);\r\n\r\n\r\n//     case 'HANDLE_PLUS':\r\n//       // Increment the quantity of an item in the cart\r\n//       return state.map((item) =>\r\n//         item.id === action.payload ? { ...item, count: item.count + 1 } : item\r\n//       );\r\n\r\n//     case 'HANDLE_MINUS':\r\n//       // Decrement the quantity of an item in the cart\r\n//       return state.map((item) =>\r\n//         item.id === action.payload ? { ...item, count: Math.max(1, item.count - 1) } : item\r\n//       );\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n\r\n// const loadCartFromLocalStorage = () => {\r\n//     const cartData = localStorage.getItem('cart');\r\n//     return cartData ? JSON.parse(cartData) : [];\r\n//   };\r\n  \r\n//   const CartProvider = ({ children }) => {\r\n//     const [cartItems, dispatch] = useReducer(cartReducer, [], loadCartFromLocalStorage);\r\n  \r\n//     useEffect(() => {\r\n//       localStorage.setItem('cart', JSON.stringify(cartItems));\r\n//     }, [cartItems]);\r\n  \r\n//     const contextValue = {\r\n//       cartItems,\r\n//       addToCart: (item) => dispatch({ type: 'ADD_TO_CART', payload: item }),\r\n//       removeFromCart: (itemId) => dispatch({ type: 'REMOVE_FROM_CART', payload: itemId }),\r\n//       handlePlus: (itemId) => dispatch({ type: 'HANDLE_PLUS', payload: itemId }),\r\n//       handleMinus: (itemId) => dispatch({ type: 'HANDLE_MINUS', payload: itemId }),\r\n//     };\r\n  \r\n//     return <CartContext.Provider value={contextValue}>{children}</CartContext.Provider>;\r\n//   };\r\n  \r\n//   const useCart = () => {\r\n//     const context = useContext(CartContext);\r\n//     if (!context) {\r\n//       throw new Error('useCart must be used within a CartProvider');\r\n//     }\r\n//     return context;\r\n//   };\r\n  \r\n//   export { CartProvider, useCart };\r\n\r\n\r\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Action types\r\nconst ADD_TO_CART = 'ADD_TO_CART';\r\nconst REMOVE_FROM_CART = 'REMOVE_FROM_CART';\r\nconst INCREASE_QUANTITY = 'INCREASE_QUANTITY';\r\nconst DECREASE_QUANTITY = 'DECREASE_QUANTITY';\r\nconst SET_CART_ITEMS = 'SET_CART_ITEMS';\r\n\r\n// Initial state\r\nconst initialState = {\r\n  cartItems: [],\r\n};\r\n\r\n// Context\r\nconst CartContext = createContext();\r\n\r\n// Reducer\r\nconst cartReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case ADD_TO_CART:\r\n      return {\r\n        ...state,\r\n        cartItems: [...state.cartItems, action.payload],\r\n      };\r\n\r\n    case REMOVE_FROM_CART:\r\n      return {\r\n        ...state,\r\n        cartItems: state.cartItems.filter((item) => item.id !== action.payload),\r\n      };\r\n\r\n    case INCREASE_QUANTITY:\r\n      return {\r\n        ...state,\r\n        cartItems: state.cartItems.map((item) =>\r\n          item.id === action.payload ? { ...item, count: item.count + 1 } : item\r\n        ),\r\n      };\r\n\r\n    case DECREASE_QUANTITY:\r\n      return {\r\n        ...state,\r\n        cartItems: state.cartItems.map((item) =>\r\n          item.id === action.payload ? { ...item, count: item.count - 1 } : item\r\n        ),\r\n      };\r\n\r\n    case SET_CART_ITEMS:\r\n      return {\r\n        ...state,\r\n        cartItems: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// CartProvider component\r\nexport const CartProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(cartReducer, initialState);\r\n\r\n  // Fetch cart items from the database on component mount\r\n  useEffect(() => {\r\n    const fetchCartItems = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:5120/api/CartItem');\r\n        dispatch({ type: SET_CART_ITEMS, payload: response.data });\r\n      } catch (error) {\r\n        console.error('Error fetching cart items:', error);\r\n      }\r\n    };\r\n\r\n    fetchCartItems();\r\n  }, []);\r\n\r\n  // Add other actions and functions here\r\n\r\n  // Function to update quantity in the database\r\n  const updateQuantity = async (productId, newQuantity) => {\r\n    try {\r\n      const response = await axios.put(`http://localhost:5120/api/cart/${productId}`, {\r\n        quantity: newQuantity,\r\n      });\r\n\r\n      if (response.data.success) {\r\n        // Optionally, you can dispatch an action to update the local state\r\n        // dispatch({ type: UPDATE_QUANTITY, payload: { productId, newQuantity } });\r\n        console.log('Quantity updated successfully');\r\n      } else {\r\n        console.error('Failed to update quantity');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating quantity:', error);\r\n    }\r\n  };\r\n\r\n  // Expose the state and relevant functions\r\n  const contextValue = {\r\n    cartItems: state.cartItems,\r\n    addToCart: (item) => dispatch({ type: ADD_TO_CART, payload: item }),\r\n    removeFromCart: (productId) => dispatch({ type: REMOVE_FROM_CART, payload: productId }),\r\n    increaseQuantity: (productId) => dispatch({ type: INCREASE_QUANTITY, payload: productId }),\r\n    decreaseQuantity: (productId) => dispatch({ type: DECREASE_QUANTITY, payload: productId }),\r\n    updateQuantity,\r\n  };\r\n\r\n  return <CartContext.Provider value={contextValue}>{children}</CartContext.Provider>;\r\n};\r\n\r\n// Custom hook to use the cart context\r\nexport const useCart = () => {\r\n  const context = useContext(CartContext);\r\n  if (!context) {\r\n    throw new Error('useCart must be used within a CartProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}