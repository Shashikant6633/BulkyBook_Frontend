{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sbhagwanshinde\\\\Desktop\\\\mini proj\\\\my-app\\\\src\\\\components\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { createContext, useContext, useReducer, useEffect } from 'react';\n\n// // Define the initial state for the cart\n// const initialCartState = {\n//   cartItems: [],\n// };\n\n// // Define actions to manipulate the cart state\n// const cartReducer = (state, action) => {\n//   switch (action.type) {\n//     case 'ADD_TO_CART':\n//       return {\n//         ...state,\n//         cartItems: [...state.cartItems, action.payload],\n//       };\n//     case 'UPDATE_QUANTITY':\n//       return {\n//         ...state,\n//         cartItems: state.cartItems.map((item) =>\n//           item.id === action.payload.id\n//             ? { ...item, count: action.payload.count }\n//             : item\n//         ),\n//       };\n//     case 'REMOVE_FROM_CART':\n//       return {\n//         ...state,\n//         cartItems: state.cartItems.filter((item) => item.id !== action.payload),\n//       };\n//     case 'PLUS_ONE':\n//       return {\n//         ...state,\n//         cartItems: state.cartItems.map((item) =>\n//           item.id === action.payload ? { ...item, count: item.count + 1 } : item\n//         ),\n//       };\n//     case 'MINUS_ONE':\n//       return {\n//         ...state,\n//         cartItems: state.cartItems.map((item) =>\n//           item.id === action.payload && item.count > 1 ? { ...item, count: item.count - 1 } : item\n//         ),\n//       };\n//     case 'LOAD_CART':\n//       return {\n//         ...state,\n//         cartItems: action.payload,\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\n// // Create the CartContext\n// const CartContext = createContext();\n\n// // Create the CartProvider component\n// export const CartProvider = ({ children }) => {\n//   const [state, dispatch] = useReducer(cartReducer, initialCartState);\n\n//   // Load data from local storage on component mount\n//   useEffect(() => {\n//     const savedCart = localStorage.getItem('cart');\n//     if (savedCart) {\n//       dispatch({ type: 'LOAD_CART', payload: JSON.parse(savedCart) });\n//     }\n//   }, []); // Empty dependency array to run only once on mount\n\n//   // Save data to local storage whenever cartItems change\n//   useEffect(() => {\n//     localStorage.setItem('cart', JSON.stringify(state.cartItems));\n//   }, [state.cartItems]);\n\n//   const addToCart = (item) => {\n//     dispatch({ type: 'ADD_TO_CART', payload: item });\n//   };\n\n//   const updateQuantity = (id, count) => {\n//     dispatch({ type: 'UPDATE_QUANTITY', payload: { id, count } });\n//   };\n\n//   const removeFromCart = (id) => {\n//     dispatch({ type: 'REMOVE_FROM_CART', payload: id });\n//   };\n\n//   const handlePlus = (id) => {\n//     dispatch({ type: 'PLUS_ONE', payload: id });\n//   };\n\n//   const handleMinus = (id) => {\n//     dispatch({ type: 'MINUS_ONE', payload: id });\n//   };\n\n//   return (\n//     <CartContext.Provider\n//       value={{\n//         cartItems: state.cartItems,\n//         addToCart,\n//         updateQuantity,\n//         removeFromCart,\n//         handlePlus,\n//         handleMinus\n//       }}\n//     >\n//       {children}\n//     </CartContext.Provider>\n//   );\n// };\n\n// // Create a custom hook to use the CartContext\n// export const useCart = () => {\n//   return useContext(CartContext);\n// };\n\n// import React, { createContext, useContext, useReducer, useEffect } from 'react';\n\n// // Define the initial state for the cart\n// const initialCartState = {\n//   cartItems: [],\n// };\n\n// // Define actions to manipulate the cart state\n// const cartReducer = (state, action) => {\n//   switch (action.type) {\n//     case 'ADD_TO_CART':\n//       return {\n//         ...state,\n//         cartItems: [...state.cartItems, action.payload],\n//       };\n//     case 'UPDATE_QUANTITY':\n//       return {\n//         ...state,\n//         cartItems: state.cartItems.map((item) =>\n//           item.id === action.payload.id\n//             ? { ...item, count: action.payload.count }\n//             : item\n//         ),\n//       };\n//     case 'REMOVE_FROM_CART':\n//       return {\n//         ...state,\n//         cartItems: state.cartItems.filter((item) => item.id !== action.payload),\n//       };\n//     case 'PLUS_ONE':\n//       return {\n//         ...state,\n//         cartItems: state.cartItems.map((item) =>\n//           item.id === action.payload ? { ...item, count: item.count + 1 } : item\n//         ),\n//       };\n//     case 'MINUS_ONE':\n//       return {\n//         ...state,\n//         cartItems: state.cartItems.map((item) =>\n//           item.id === action.payload && item.count > 1 ? { ...item, count: item.count - 1 } : item\n//         ),\n//       };\n//     case 'LOAD_CART':\n//       return {\n//         ...state,\n//         cartItems: action.payload,\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\n// // Create the CartContext\n// const CartContext = createContext();\n\n// // Create the CartProvider component\n// export const CartProvider = ({ children }) => {\n//   const [state, dispatch] = useReducer(cartReducer, initialCartState);\n\n//   // Load data from local storage on component mount\n//   useEffect(() => {\n//     const savedCart = localStorage.getItem('cart');\n//     if (savedCart) {\n//       dispatch({ type: 'LOAD_CART', payload: JSON.parse(savedCart) });\n//     }\n//   }, []);\n\n//   // Save data to local storage whenever cartItems change\n//   useEffect(() => {\n//     localStorage.setItem('cart', JSON.stringify(state.cartItems));\n//   }, [state.cartItems]);\n\n//   const apiUrl = 'http://localhost:5120/api/Cart';\n\n//   const addToCart = async (item) => {\n//     try {\n//       const response = await fetch(apiUrl, {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//           // Add any authentication headers if needed\n//         },\n//         body: JSON.stringify(item),\n//       });\n\n//       if (response.ok) {\n//         // Item added successfully to the backend, now update the local state\n//         dispatch({ type: 'ADD_TO_CART', payload: item });\n//       } else {\n//         console.error('Failed to add item to cart');\n//       }\n//     } catch (error) {\n//       console.error('Network error while adding item to cart', error);\n//     }\n//   };\n\n//   // Add similar API calls for other actions (updateQuantity, removeFromCart, handlePlus, handleMinus)\n\n//   return (\n//     <CartContext.Provider\n//       value={{\n//         cartItems: state.cartItems,\n//         addToCart,\n//         // Add other action functions here\n//       }}\n//     >\n//       {children}\n//     </CartContext.Provider>\n//   );\n// };\n\n// // Create a custom hook to use the CartContext\n// export const useCart = () => {\n//   return useContext(CartContext);\n// };\n\n// import React, { createContext, useContext, useReducer, useEffect } from 'react';\n\n// const CartContext = createContext();\n\n// const cartReducer = (state, action) => {\n//     switch (action.type) {\n//       case 'ADD_TO_CART':\n//         return [...state, action.payload];\n\n//       case 'REMOVE_FROM_CART':\n//         return state.filter(item => item.id !== action.payload);\n\n//         case 'PLUS_ONE':\n//             return {\n//               ...state,\n//               cartItems: state.cartItems.map((item) =>\n//                 item.id === action.payload ? { ...item, count: item.count + 1 } : item\n//               ),\n//             };\n//           case 'MINUS_ONE':\n//             return {\n//               ...state,\n//               cartItems: state.cartItems.map((item) =>\n//                 item.id === action.payload && item.count > 1 ? { ...item, count: item.count - 1 } : item\n//               ),\n//             };\n//           case 'LOAD_CART':\n//             return {\n//               ...state,\n//               cartItems: action.payload,\n//             };\n\n//       default:\n//         return state;\n//     }\n//   };\n\n// const CartProvider = ({ children }) => {\n//   const [cartItems, dispatch] = useReducer(cartReducer, [], (initial) => {\n//     // Load cart items from local storage on initial render\n//     const storedCart = localStorage.getItem('cart');\n//     return storedCart ? JSON.parse(storedCart) : initial;\n//   });\n\n//   // Update local storage whenever the cart items change\n//   useEffect(() => {\n//     localStorage.setItem('cart', JSON.stringify(cartItems));\n//   }, [cartItems]);\n\n//   const addToCart = (product) => {\n//     dispatch({ type: 'ADD_TO_CART', payload: product });\n//   };\n\n//   const handlePlus = (id) => {\n//         dispatch({ type: 'PLUS_ONE', payload: id });\n//       };\n\n//       const handleMinus = (id) => {\n//         dispatch({ type: 'MINUS_ONE', payload: id });\n//       };  \n\n//   const removeFromCart = (productId) => {\n//     dispatch({ type: 'REMOVE_FROM_CART', payload: productId });\n//   };\n\n//   return (\n//     <CartContext.Provider value={{ cartItems, addToCart, removeFromCart }}>\n//       {children}\n//     </CartContext.Provider>\n//   );\n// };\n\n// const useCart = () => {\n//   const context = useContext(CartContext);\n//   if (!context) {\n//     throw new Error('useCart must be used within a CartProvider');\n//   }\n//   return context;\n// };\n\n// export { CartProvider, useCart };\n\n//Working Code\n\n// import React, { createContext, useContext, useReducer,useEffect } from 'react';\n\n// // Create a context\n// const CartContext = createContext();\n\n// // Define your cart reducer function\n// const cartReducer = (state, action) => {\n//   switch (action.type) {\n\n//     case 'ADD_TO_CART':\n//         return [...state, action.payload];\n\n//       case 'REMOVE_FROM_CART':\n//         return state.filter(item => item.id !== action.payload);\n\n//     case 'HANDLE_PLUS':\n//       // Increment the quantity of an item in the cart\n//       return state.map((item) =>\n//         item.id === action.payload ? { ...item, count: item.count + 1 } : item\n//       );\n\n//     case 'HANDLE_MINUS':\n//       // Decrement the quantity of an item in the cart\n//       return state.map((item) =>\n//         item.id === action.payload ? { ...item, count: Math.max(1, item.count - 1) } : item\n//       );\n\n//     default:\n//       return state;\n//   }\n// };\n\n// const loadCartFromLocalStorage = () => {\n//     const cartData = localStorage.getItem('cart');\n//     return cartData ? JSON.parse(cartData) : [];\n//   };\n\n//   const CartProvider = ({ children }) => {\n//     const [cartItems, dispatch] = useReducer(cartReducer, [], loadCartFromLocalStorage);\n\n//     useEffect(() => {\n//       localStorage.setItem('cart', JSON.stringify(cartItems));\n//     }, [cartItems]);\n\n//     const contextValue = {\n//       cartItems,\n//       addToCart: (item) => dispatch({ type: 'ADD_TO_CART', payload: item }),\n//       removeFromCart: (itemId) => dispatch({ type: 'REMOVE_FROM_CART', payload: itemId }),\n//       handlePlus: (itemId) => dispatch({ type: 'HANDLE_PLUS', payload: itemId }),\n//       handleMinus: (itemId) => dispatch({ type: 'HANDLE_MINUS', payload: itemId }),\n//     };\n\n//     return <CartContext.Provider value={contextValue}>{children}</CartContext.Provider>;\n//   };\n\n//   const useCart = () => {\n//     const context = useContext(CartContext);\n//     if (!context) {\n//       throw new Error('useCart must be used within a CartProvider');\n//     }\n//     return context;\n//   };\n\n//   export { CartProvider, useCart };\n\n// import React, { createContext, useContext, useReducer, useEffect } from 'react';\n\n// // Create a context\n// const CartContext = createContext();\n\n// // Define your cart reducer function\n// const cartReducer = (state, action) => {\n//   switch (action.type) {\n//     case 'ADD_TO_CART':\n//       return [...state, action.payload];\n\n//     case 'REMOVE_FROM_CART':\n//       return state.filter((item) => item.id !== action.payload);\n\n//     case 'HANDLE_PLUS':\n//       return state.map((item) =>\n//         item.id === action.payload ? { ...item, count: item.count + 1 } : item\n//       );\n\n//     case 'HANDLE_MINUS':\n//       return state.map((item) =>\n//         item.id === action.payload ? { ...item, count: Math.max(1, item.count - 1) } : item\n//       );\n\n//     case 'INCREMENT_QUANTITY':\n//       return state.map((item) =>\n//         item.id === action.payload ? { ...item, count: item.count + 1 } : item\n//       );\n\n//     case 'UPDATE_QUANTITY':\n//       return state.map((item) =>\n//         item.id === action.payload.itemId ? { ...item, count: action.payload.newQuantity } : item\n//       );\n\n//     default:\n//       return state;\n//   }\n// };\n\n// const loadCartFromLocalStorage = () => {\n//   const cartData = localStorage.getItem('cart');\n//   return cartData ? JSON.parse(cartData) : [];\n// };\n\n// const CartProvider = ({ children }) => {\n//   const [cartItems, dispatch] = useReducer(cartReducer, [], loadCartFromLocalStorage);\n\n//   useEffect(() => {\n//     localStorage.setItem('cart', JSON.stringify(cartItems));\n//   }, [cartItems]);\n\n//   const contextValue = {\n//     cartItems,\n//     addToCart: (item) => dispatch({ type: 'ADD_TO_CART', payload: item }),\n//     removeFromCart: (itemId) => dispatch({ type: 'REMOVE_FROM_CART', payload: itemId }),\n//     handlePlus: (itemId) => dispatch({ type: 'HANDLE_PLUS', payload: itemId }),\n//     handleMinus: (itemId) => dispatch({ type: 'HANDLE_MINUS', payload: itemId }),\n//     incrementQuantity: async (itemId) => {\n//       try {\n//         const response = await fetch(`http://localhost:5120/api/CartItem/IncrementQuantity/${itemId}`, {\n//           method: 'PUT',\n//           headers: {\n//             'Content-Type': 'application/json',\n//           },\n//         });\n\n//         if (response.ok) {\n//           dispatch({ type: 'INCREMENT_QUANTITY', payload: itemId });\n//         } else {\n//           console.error('Failed to increment quantity');\n//         }\n//       } catch (error) {\n//         console.error('Error incrementing quantity:', error);\n//       }\n//     },\n//     updateQuantity: async (itemId, newQuantity) => {\n//       try {\n//         const response = await fetch(`http://localhost:5120/api/CartItem/${itemId}`, {\n//           method: 'PUT',\n//           headers: {\n//             'Content-Type': 'application/json',\n//           },\n//           body: JSON.stringify({ quantity: newQuantity }),\n//         });\n\n//         if (response.ok) {\n//           dispatch({ type: 'UPDATE_QUANTITY', payload: { itemId, newQuantity } });\n//         } else {\n//           console.error('Failed to update quantity');\n//         }\n//       } catch (error) {\n//         console.error('Error updating quantity:', error);\n//       }\n//     },\n//   };\n\n//   return <CartContext.Provider value={contextValue}>{children}</CartContext.Provider>;\n// };\n\n// const useCart = () => {\n//   const context = useContext(CartContext);\n//   if (!context) {\n//     throw new Error('useCart must be used within a CartProvider');\n//   }\n//   return context;\n// };\n\n// export { CartProvider, useCart };\n\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\n\n// Create a context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\n\n// Define your cart reducer function\nconst cartReducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_TO_CART':\n      return [...state, action.payload];\n    case 'REMOVE_FROM_CART':\n      return state.filter(item => item.id !== action.payload);\n    case 'HANDLE_PLUS':\n      return state.map(item => item.id === action.payload ? {\n        ...item,\n        count: item.count + 1\n      } : item);\n    case 'HANDLE_MINUS':\n      return state.map(item => item.id === action.payload ? {\n        ...item,\n        count: Math.max(1, item.count - 1)\n      } : item);\n    default:\n      return state;\n  }\n};\nconst loadCartFromLocalStorage = () => {\n  const cartData = localStorage.getItem('cart');\n  return cartData ? JSON.parse(cartData) : [];\n};\nconst CartProvider = ({\n  children\n}) => {\n  _s();\n  const [cartItems, dispatch] = useReducer(cartReducer, [], loadCartFromLocalStorage);\n  useEffect(() => {\n    localStorage.setItem('cart', JSON.stringify(cartItems));\n  }, [cartItems]);\n  const updateQuantityBackend = async (itemId, newQuantity) => {\n    try {\n      const url = `http://localhost:5120/api/CartItem/${itemId}`;\n      console.log('Updating quantity in the backend. URL:', url);\n      const response = await fetch(url, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          quantity: newQuantity\n        }) // Update this property name if needed\n      });\n\n      if (!response.ok) {\n        console.error('Failed to update quantity in the backend');\n      }\n    } catch (error) {\n      console.error('Error updating quantity in the backend:', error);\n    }\n  };\n  const contextValue = {\n    cartItems,\n    addToCart: item => dispatch({\n      type: 'ADD_TO_CART',\n      payload: item\n    }),\n    removeFromCart: itemId => dispatch({\n      type: 'REMOVE_FROM_CART',\n      payload: itemId\n    }),\n    handlePlus: itemId => dispatch({\n      type: 'HANDLE_PLUS',\n      payload: itemId\n    }),\n    handleMinus: itemId => dispatch({\n      type: 'HANDLE_MINUS',\n      payload: itemId\n    }),\n    updateQuantityBackend\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 580,\n    columnNumber: 10\n  }, this);\n};\n_s(CartProvider, \"DYCAM0GA7WL6gjUdExNEYCXW5Us=\");\n_c = CartProvider;\nconst useCart = () => {\n  _s2();\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n};\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport { CartProvider, useCart };\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","jsxDEV","_jsxDEV","CartContext","cartReducer","state","action","type","payload","filter","item","id","map","count","Math","max","loadCartFromLocalStorage","cartData","localStorage","getItem","JSON","parse","CartProvider","children","_s","cartItems","dispatch","setItem","stringify","updateQuantityBackend","itemId","newQuantity","url","console","log","response","fetch","method","headers","body","quantity","ok","error","contextValue","addToCart","removeFromCart","handlePlus","handleMinus","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/sbhagwanshinde/Desktop/mini proj/my-app/src/components/CartContext.js"],"sourcesContent":["\r\n// import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\n\r\n// // Define the initial state for the cart\r\n// const initialCartState = {\r\n//   cartItems: [],\r\n// };\r\n\r\n// // Define actions to manipulate the cart state\r\n// const cartReducer = (state, action) => {\r\n//   switch (action.type) {\r\n//     case 'ADD_TO_CART':\r\n//       return {\r\n//         ...state,\r\n//         cartItems: [...state.cartItems, action.payload],\r\n//       };\r\n//     case 'UPDATE_QUANTITY':\r\n//       return {\r\n//         ...state,\r\n//         cartItems: state.cartItems.map((item) =>\r\n//           item.id === action.payload.id\r\n//             ? { ...item, count: action.payload.count }\r\n//             : item\r\n//         ),\r\n//       };\r\n//     case 'REMOVE_FROM_CART':\r\n//       return {\r\n//         ...state,\r\n//         cartItems: state.cartItems.filter((item) => item.id !== action.payload),\r\n//       };\r\n//     case 'PLUS_ONE':\r\n//       return {\r\n//         ...state,\r\n//         cartItems: state.cartItems.map((item) =>\r\n//           item.id === action.payload ? { ...item, count: item.count + 1 } : item\r\n//         ),\r\n//       };\r\n//     case 'MINUS_ONE':\r\n//       return {\r\n//         ...state,\r\n//         cartItems: state.cartItems.map((item) =>\r\n//           item.id === action.payload && item.count > 1 ? { ...item, count: item.count - 1 } : item\r\n//         ),\r\n//       };\r\n//     case 'LOAD_CART':\r\n//       return {\r\n//         ...state,\r\n//         cartItems: action.payload,\r\n//       };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// // Create the CartContext\r\n// const CartContext = createContext();\r\n\r\n// // Create the CartProvider component\r\n// export const CartProvider = ({ children }) => {\r\n//   const [state, dispatch] = useReducer(cartReducer, initialCartState);\r\n\r\n//   // Load data from local storage on component mount\r\n//   useEffect(() => {\r\n//     const savedCart = localStorage.getItem('cart');\r\n//     if (savedCart) {\r\n//       dispatch({ type: 'LOAD_CART', payload: JSON.parse(savedCart) });\r\n//     }\r\n//   }, []); // Empty dependency array to run only once on mount\r\n\r\n//   // Save data to local storage whenever cartItems change\r\n//   useEffect(() => {\r\n//     localStorage.setItem('cart', JSON.stringify(state.cartItems));\r\n//   }, [state.cartItems]);\r\n\r\n//   const addToCart = (item) => {\r\n//     dispatch({ type: 'ADD_TO_CART', payload: item });\r\n//   };\r\n\r\n//   const updateQuantity = (id, count) => {\r\n//     dispatch({ type: 'UPDATE_QUANTITY', payload: { id, count } });\r\n//   };\r\n\r\n//   const removeFromCart = (id) => {\r\n//     dispatch({ type: 'REMOVE_FROM_CART', payload: id });\r\n//   };\r\n\r\n//   const handlePlus = (id) => {\r\n//     dispatch({ type: 'PLUS_ONE', payload: id });\r\n//   };\r\n\r\n//   const handleMinus = (id) => {\r\n//     dispatch({ type: 'MINUS_ONE', payload: id });\r\n//   };\r\n\r\n//   return (\r\n//     <CartContext.Provider\r\n//       value={{\r\n//         cartItems: state.cartItems,\r\n//         addToCart,\r\n//         updateQuantity,\r\n//         removeFromCart,\r\n//         handlePlus,\r\n//         handleMinus\r\n//       }}\r\n//     >\r\n//       {children}\r\n//     </CartContext.Provider>\r\n//   );\r\n// };\r\n\r\n// // Create a custom hook to use the CartContext\r\n// export const useCart = () => {\r\n//   return useContext(CartContext);\r\n// };\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\n\r\n// // Define the initial state for the cart\r\n// const initialCartState = {\r\n//   cartItems: [],\r\n// };\r\n\r\n// // Define actions to manipulate the cart state\r\n// const cartReducer = (state, action) => {\r\n//   switch (action.type) {\r\n//     case 'ADD_TO_CART':\r\n//       return {\r\n//         ...state,\r\n//         cartItems: [...state.cartItems, action.payload],\r\n//       };\r\n//     case 'UPDATE_QUANTITY':\r\n//       return {\r\n//         ...state,\r\n//         cartItems: state.cartItems.map((item) =>\r\n//           item.id === action.payload.id\r\n//             ? { ...item, count: action.payload.count }\r\n//             : item\r\n//         ),\r\n//       };\r\n//     case 'REMOVE_FROM_CART':\r\n//       return {\r\n//         ...state,\r\n//         cartItems: state.cartItems.filter((item) => item.id !== action.payload),\r\n//       };\r\n//     case 'PLUS_ONE':\r\n//       return {\r\n//         ...state,\r\n//         cartItems: state.cartItems.map((item) =>\r\n//           item.id === action.payload ? { ...item, count: item.count + 1 } : item\r\n//         ),\r\n//       };\r\n//     case 'MINUS_ONE':\r\n//       return {\r\n//         ...state,\r\n//         cartItems: state.cartItems.map((item) =>\r\n//           item.id === action.payload && item.count > 1 ? { ...item, count: item.count - 1 } : item\r\n//         ),\r\n//       };\r\n//     case 'LOAD_CART':\r\n//       return {\r\n//         ...state,\r\n//         cartItems: action.payload,\r\n//       };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// // Create the CartContext\r\n// const CartContext = createContext();\r\n\r\n// // Create the CartProvider component\r\n// export const CartProvider = ({ children }) => {\r\n//   const [state, dispatch] = useReducer(cartReducer, initialCartState);\r\n\r\n//   // Load data from local storage on component mount\r\n//   useEffect(() => {\r\n//     const savedCart = localStorage.getItem('cart');\r\n//     if (savedCart) {\r\n//       dispatch({ type: 'LOAD_CART', payload: JSON.parse(savedCart) });\r\n//     }\r\n//   }, []);\r\n\r\n//   // Save data to local storage whenever cartItems change\r\n//   useEffect(() => {\r\n//     localStorage.setItem('cart', JSON.stringify(state.cartItems));\r\n//   }, [state.cartItems]);\r\n\r\n//   const apiUrl = 'http://localhost:5120/api/Cart';\r\n\r\n//   const addToCart = async (item) => {\r\n//     try {\r\n//       const response = await fetch(apiUrl, {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//           // Add any authentication headers if needed\r\n//         },\r\n//         body: JSON.stringify(item),\r\n//       });\r\n\r\n//       if (response.ok) {\r\n//         // Item added successfully to the backend, now update the local state\r\n//         dispatch({ type: 'ADD_TO_CART', payload: item });\r\n//       } else {\r\n//         console.error('Failed to add item to cart');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Network error while adding item to cart', error);\r\n//     }\r\n//   };\r\n\r\n//   // Add similar API calls for other actions (updateQuantity, removeFromCart, handlePlus, handleMinus)\r\n\r\n//   return (\r\n//     <CartContext.Provider\r\n//       value={{\r\n//         cartItems: state.cartItems,\r\n//         addToCart,\r\n//         // Add other action functions here\r\n//       }}\r\n//     >\r\n//       {children}\r\n//     </CartContext.Provider>\r\n//   );\r\n// };\r\n\r\n// // Create a custom hook to use the CartContext\r\n// export const useCart = () => {\r\n//   return useContext(CartContext);\r\n// };\r\n\r\n\r\n\r\n\r\n\r\n// import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\n\r\n// const CartContext = createContext();\r\n\r\n// const cartReducer = (state, action) => {\r\n//     switch (action.type) {\r\n//       case 'ADD_TO_CART':\r\n//         return [...state, action.payload];\r\n  \r\n//       case 'REMOVE_FROM_CART':\r\n//         return state.filter(item => item.id !== action.payload);\r\n\r\n//         case 'PLUS_ONE':\r\n//             return {\r\n//               ...state,\r\n//               cartItems: state.cartItems.map((item) =>\r\n//                 item.id === action.payload ? { ...item, count: item.count + 1 } : item\r\n//               ),\r\n//             };\r\n//           case 'MINUS_ONE':\r\n//             return {\r\n//               ...state,\r\n//               cartItems: state.cartItems.map((item) =>\r\n//                 item.id === action.payload && item.count > 1 ? { ...item, count: item.count - 1 } : item\r\n//               ),\r\n//             };\r\n//           case 'LOAD_CART':\r\n//             return {\r\n//               ...state,\r\n//               cartItems: action.payload,\r\n//             };\r\n  \r\n//       default:\r\n//         return state;\r\n//     }\r\n//   };\r\n  \r\n\r\n// const CartProvider = ({ children }) => {\r\n//   const [cartItems, dispatch] = useReducer(cartReducer, [], (initial) => {\r\n//     // Load cart items from local storage on initial render\r\n//     const storedCart = localStorage.getItem('cart');\r\n//     return storedCart ? JSON.parse(storedCart) : initial;\r\n//   });\r\n\r\n//   // Update local storage whenever the cart items change\r\n//   useEffect(() => {\r\n//     localStorage.setItem('cart', JSON.stringify(cartItems));\r\n//   }, [cartItems]);\r\n\r\n//   const addToCart = (product) => {\r\n//     dispatch({ type: 'ADD_TO_CART', payload: product });\r\n//   };\r\n\r\n//   const handlePlus = (id) => {\r\n//         dispatch({ type: 'PLUS_ONE', payload: id });\r\n//       };\r\n    \r\n//       const handleMinus = (id) => {\r\n//         dispatch({ type: 'MINUS_ONE', payload: id });\r\n//       };  \r\n\r\n//   const removeFromCart = (productId) => {\r\n//     dispatch({ type: 'REMOVE_FROM_CART', payload: productId });\r\n//   };\r\n\r\n//   return (\r\n//     <CartContext.Provider value={{ cartItems, addToCart, removeFromCart }}>\r\n//       {children}\r\n//     </CartContext.Provider>\r\n//   );\r\n// };\r\n\r\n// const useCart = () => {\r\n//   const context = useContext(CartContext);\r\n//   if (!context) {\r\n//     throw new Error('useCart must be used within a CartProvider');\r\n//   }\r\n//   return context;\r\n// };\r\n\r\n// export { CartProvider, useCart };\r\n\r\n\r\n//Working Code\r\n\r\n\r\n// import React, { createContext, useContext, useReducer,useEffect } from 'react';\r\n\r\n// // Create a context\r\n// const CartContext = createContext();\r\n\r\n// // Define your cart reducer function\r\n// const cartReducer = (state, action) => {\r\n//   switch (action.type) {\r\n\r\n//     case 'ADD_TO_CART':\r\n//         return [...state, action.payload];\r\n  \r\n//       case 'REMOVE_FROM_CART':\r\n//         return state.filter(item => item.id !== action.payload);\r\n\r\n\r\n//     case 'HANDLE_PLUS':\r\n//       // Increment the quantity of an item in the cart\r\n//       return state.map((item) =>\r\n//         item.id === action.payload ? { ...item, count: item.count + 1 } : item\r\n//       );\r\n\r\n//     case 'HANDLE_MINUS':\r\n//       // Decrement the quantity of an item in the cart\r\n//       return state.map((item) =>\r\n//         item.id === action.payload ? { ...item, count: Math.max(1, item.count - 1) } : item\r\n//       );\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n\r\n// const loadCartFromLocalStorage = () => {\r\n//     const cartData = localStorage.getItem('cart');\r\n//     return cartData ? JSON.parse(cartData) : [];\r\n//   };\r\n  \r\n//   const CartProvider = ({ children }) => {\r\n//     const [cartItems, dispatch] = useReducer(cartReducer, [], loadCartFromLocalStorage);\r\n  \r\n//     useEffect(() => {\r\n//       localStorage.setItem('cart', JSON.stringify(cartItems));\r\n//     }, [cartItems]);\r\n  \r\n//     const contextValue = {\r\n//       cartItems,\r\n//       addToCart: (item) => dispatch({ type: 'ADD_TO_CART', payload: item }),\r\n//       removeFromCart: (itemId) => dispatch({ type: 'REMOVE_FROM_CART', payload: itemId }),\r\n//       handlePlus: (itemId) => dispatch({ type: 'HANDLE_PLUS', payload: itemId }),\r\n//       handleMinus: (itemId) => dispatch({ type: 'HANDLE_MINUS', payload: itemId }),\r\n//     };\r\n  \r\n//     return <CartContext.Provider value={contextValue}>{children}</CartContext.Provider>;\r\n//   };\r\n  \r\n//   const useCart = () => {\r\n//     const context = useContext(CartContext);\r\n//     if (!context) {\r\n//       throw new Error('useCart must be used within a CartProvider');\r\n//     }\r\n//     return context;\r\n//   };\r\n  \r\n//   export { CartProvider, useCart };\r\n\r\n\r\n// import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\n\r\n// // Create a context\r\n// const CartContext = createContext();\r\n\r\n// // Define your cart reducer function\r\n// const cartReducer = (state, action) => {\r\n//   switch (action.type) {\r\n//     case 'ADD_TO_CART':\r\n//       return [...state, action.payload];\r\n\r\n//     case 'REMOVE_FROM_CART':\r\n//       return state.filter((item) => item.id !== action.payload);\r\n\r\n//     case 'HANDLE_PLUS':\r\n//       return state.map((item) =>\r\n//         item.id === action.payload ? { ...item, count: item.count + 1 } : item\r\n//       );\r\n\r\n//     case 'HANDLE_MINUS':\r\n//       return state.map((item) =>\r\n//         item.id === action.payload ? { ...item, count: Math.max(1, item.count - 1) } : item\r\n//       );\r\n\r\n//     case 'INCREMENT_QUANTITY':\r\n//       return state.map((item) =>\r\n//         item.id === action.payload ? { ...item, count: item.count + 1 } : item\r\n//       );\r\n\r\n//     case 'UPDATE_QUANTITY':\r\n//       return state.map((item) =>\r\n//         item.id === action.payload.itemId ? { ...item, count: action.payload.newQuantity } : item\r\n//       );\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const loadCartFromLocalStorage = () => {\r\n//   const cartData = localStorage.getItem('cart');\r\n//   return cartData ? JSON.parse(cartData) : [];\r\n// };\r\n\r\n// const CartProvider = ({ children }) => {\r\n//   const [cartItems, dispatch] = useReducer(cartReducer, [], loadCartFromLocalStorage);\r\n\r\n//   useEffect(() => {\r\n//     localStorage.setItem('cart', JSON.stringify(cartItems));\r\n//   }, [cartItems]);\r\n\r\n//   const contextValue = {\r\n//     cartItems,\r\n//     addToCart: (item) => dispatch({ type: 'ADD_TO_CART', payload: item }),\r\n//     removeFromCart: (itemId) => dispatch({ type: 'REMOVE_FROM_CART', payload: itemId }),\r\n//     handlePlus: (itemId) => dispatch({ type: 'HANDLE_PLUS', payload: itemId }),\r\n//     handleMinus: (itemId) => dispatch({ type: 'HANDLE_MINUS', payload: itemId }),\r\n//     incrementQuantity: async (itemId) => {\r\n//       try {\r\n//         const response = await fetch(`http://localhost:5120/api/CartItem/IncrementQuantity/${itemId}`, {\r\n//           method: 'PUT',\r\n//           headers: {\r\n//             'Content-Type': 'application/json',\r\n//           },\r\n//         });\r\n\r\n//         if (response.ok) {\r\n//           dispatch({ type: 'INCREMENT_QUANTITY', payload: itemId });\r\n//         } else {\r\n//           console.error('Failed to increment quantity');\r\n//         }\r\n//       } catch (error) {\r\n//         console.error('Error incrementing quantity:', error);\r\n//       }\r\n//     },\r\n//     updateQuantity: async (itemId, newQuantity) => {\r\n//       try {\r\n//         const response = await fetch(`http://localhost:5120/api/CartItem/${itemId}`, {\r\n//           method: 'PUT',\r\n//           headers: {\r\n//             'Content-Type': 'application/json',\r\n//           },\r\n//           body: JSON.stringify({ quantity: newQuantity }),\r\n//         });\r\n\r\n//         if (response.ok) {\r\n//           dispatch({ type: 'UPDATE_QUANTITY', payload: { itemId, newQuantity } });\r\n//         } else {\r\n//           console.error('Failed to update quantity');\r\n//         }\r\n//       } catch (error) {\r\n//         console.error('Error updating quantity:', error);\r\n//       }\r\n//     },\r\n//   };\r\n\r\n//   return <CartContext.Provider value={contextValue}>{children}</CartContext.Provider>;\r\n// };\r\n\r\n// const useCart = () => {\r\n//   const context = useContext(CartContext);\r\n//   if (!context) {\r\n//     throw new Error('useCart must be used within a CartProvider');\r\n//   }\r\n//   return context;\r\n// };\r\n\r\n// export { CartProvider, useCart };\r\n\r\n\r\n\r\n\r\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\r\n\r\n// Create a context\r\nconst CartContext = createContext();\r\n\r\n// Define your cart reducer function\r\nconst cartReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_TO_CART':\r\n      return [...state, action.payload];\r\n\r\n    case 'REMOVE_FROM_CART':\r\n      return state.filter((item) => item.id !== action.payload);\r\n\r\n    case 'HANDLE_PLUS':\r\n      return state.map((item) =>\r\n        item.id === action.payload ? { ...item, count: item.count + 1 } : item\r\n      );\r\n\r\n    case 'HANDLE_MINUS':\r\n      return state.map((item) =>\r\n        item.id === action.payload ? { ...item, count: Math.max(1, item.count - 1) } : item\r\n      );\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst loadCartFromLocalStorage = () => {\r\n  const cartData = localStorage.getItem('cart');\r\n  return cartData ? JSON.parse(cartData) : [];\r\n};\r\n\r\nconst CartProvider = ({ children }) => {\r\n  const [cartItems, dispatch] = useReducer(cartReducer, [], loadCartFromLocalStorage);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('cart', JSON.stringify(cartItems));\r\n  }, [cartItems]);\r\n\r\n  const updateQuantityBackend = async (itemId, newQuantity) => {\r\n    try {\r\n      const url = `http://localhost:5120/api/CartItem/${itemId}`;\r\n      console.log('Updating quantity in the backend. URL:', url);\r\n\r\n      const response = await fetch(url, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ quantity: newQuantity }), // Update this property name if needed\r\n      });\r\n\r\n      if (!response.ok) {\r\n        console.error('Failed to update quantity in the backend');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating quantity in the backend:', error);\r\n    }\r\n  };\r\n\r\n  const contextValue = {\r\n    cartItems,\r\n    addToCart: (item) => dispatch({ type: 'ADD_TO_CART', payload: item }),\r\n    removeFromCart: (itemId) => dispatch({ type: 'REMOVE_FROM_CART', payload: itemId }),\r\n    handlePlus: (itemId) => dispatch({ type: 'HANDLE_PLUS', payload: itemId }),\r\n    handleMinus: (itemId) => dispatch({ type: 'HANDLE_MINUS', payload: itemId }),\r\n    updateQuantityBackend,\r\n  };\r\n\r\n  return <CartContext.Provider value={contextValue}>{children}</CartContext.Provider>;\r\n};\r\n\r\nconst useCart = () => {\r\n  const context = useContext(CartContext);\r\n  if (!context) {\r\n    throw new Error('useCart must be used within a CartProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport { CartProvider, useCart };\r\n"],"mappings":";;;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAOA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAMA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;;AAE/E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;;AAEnC;AACA,MAAMO,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACrC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,aAAa;MAChB,OAAO,CAAC,GAAGF,KAAK,EAAEC,MAAM,CAACE,OAAO,CAAC;IAEnC,KAAK,kBAAkB;MACrB,OAAOH,KAAK,CAACI,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKL,MAAM,CAACE,OAAO,CAAC;IAE3D,KAAK,aAAa;MAChB,OAAOH,KAAK,CAACO,GAAG,CAAEF,IAAI,IACpBA,IAAI,CAACC,EAAE,KAAKL,MAAM,CAACE,OAAO,GAAG;QAAE,GAAGE,IAAI;QAAEG,KAAK,EAAEH,IAAI,CAACG,KAAK,GAAG;MAAE,CAAC,GAAGH,IACpE,CAAC;IAEH,KAAK,cAAc;MACjB,OAAOL,KAAK,CAACO,GAAG,CAAEF,IAAI,IACpBA,IAAI,CAACC,EAAE,KAAKL,MAAM,CAACE,OAAO,GAAG;QAAE,GAAGE,IAAI;QAAEG,KAAK,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEL,IAAI,CAACG,KAAK,GAAG,CAAC;MAAE,CAAC,GAAGH,IACjF,CAAC;IAEH;MACE,OAAOL,KAAK;EAChB;AACF,CAAC;AAED,MAAMW,wBAAwB,GAAGA,CAAA,KAAM;EACrC,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;EAC7C,OAAOF,QAAQ,GAAGG,IAAI,CAACC,KAAK,CAACJ,QAAQ,CAAC,GAAG,EAAE;AAC7C,CAAC;AAED,MAAMK,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,SAAS,EAAEC,QAAQ,CAAC,GAAG3B,UAAU,CAACK,WAAW,EAAE,EAAE,EAAEY,wBAAwB,CAAC;EAEnFhB,SAAS,CAAC,MAAM;IACdkB,YAAY,CAACS,OAAO,CAAC,MAAM,EAAEP,IAAI,CAACQ,SAAS,CAACH,SAAS,CAAC,CAAC;EACzD,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;EAEf,MAAMI,qBAAqB,GAAG,MAAAA,CAAOC,MAAM,EAAEC,WAAW,KAAK;IAC3D,IAAI;MACF,MAAMC,GAAG,GAAI,sCAAqCF,MAAO,EAAC;MAC1DG,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEF,GAAG,CAAC;MAE1D,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,EAAE;QAChCK,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEnB,IAAI,CAACQ,SAAS,CAAC;UAAEY,QAAQ,EAAET;QAAY,CAAC,CAAC,CAAE;MACnD,CAAC,CAAC;;MAEF,IAAI,CAACI,QAAQ,CAACM,EAAE,EAAE;QAChBR,OAAO,CAACS,KAAK,CAAC,0CAA0C,CAAC;MAC3D;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdT,OAAO,CAACS,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;IACjE;EACF,CAAC;EAED,MAAMC,YAAY,GAAG;IACnBlB,SAAS;IACTmB,SAAS,EAAGlC,IAAI,IAAKgB,QAAQ,CAAC;MAAEnB,IAAI,EAAE,aAAa;MAAEC,OAAO,EAAEE;IAAK,CAAC,CAAC;IACrEmC,cAAc,EAAGf,MAAM,IAAKJ,QAAQ,CAAC;MAAEnB,IAAI,EAAE,kBAAkB;MAAEC,OAAO,EAAEsB;IAAO,CAAC,CAAC;IACnFgB,UAAU,EAAGhB,MAAM,IAAKJ,QAAQ,CAAC;MAAEnB,IAAI,EAAE,aAAa;MAAEC,OAAO,EAAEsB;IAAO,CAAC,CAAC;IAC1EiB,WAAW,EAAGjB,MAAM,IAAKJ,QAAQ,CAAC;MAAEnB,IAAI,EAAE,cAAc;MAAEC,OAAO,EAAEsB;IAAO,CAAC,CAAC;IAC5ED;EACF,CAAC;EAED,oBAAO3B,OAAA,CAACC,WAAW,CAAC6C,QAAQ;IAACC,KAAK,EAAEN,YAAa;IAAApB,QAAA,EAAEA;EAAQ;IAAA2B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AACrF,CAAC;AAAC7B,EAAA,CAtCIF,YAAY;AAAAgC,EAAA,GAAZhC,YAAY;AAwClB,MAAMiC,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACpB,MAAMC,OAAO,GAAG3D,UAAU,CAACK,WAAW,CAAC;EACvC,IAAI,CAACsD,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANID,OAAO;AAQb,SAASjC,YAAY,EAAEiC,OAAO;AAAG,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}