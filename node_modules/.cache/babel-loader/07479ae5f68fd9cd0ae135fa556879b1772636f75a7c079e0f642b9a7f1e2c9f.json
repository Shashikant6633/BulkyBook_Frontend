{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sbhagwanshinde\\\\Desktop\\\\mini proj\\\\my-app\\\\src\\\\components\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { createContext, useContext, useReducer, useEffect } from 'react';\n\n// // Define the initial state for the cart\n// const initialCartState = {\n//   cartItems: [],\n// };\n\n// // Define actions to manipulate the cart state\n// const cartReducer = (state, action) => {\n//   switch (action.type) {\n//     case 'ADD_TO_CART':\n//       return {\n//         ...state,\n//         cartItems: [...state.cartItems, action.payload],\n//       };\n//     case 'UPDATE_QUANTITY':\n//       return {\n//         ...state,\n//         cartItems: state.cartItems.map((item) =>\n//           item.id === action.payload.id\n//             ? { ...item, count: action.payload.count }\n//             : item\n//         ),\n//       };\n//     case 'REMOVE_FROM_CART':\n//       return {\n//         ...state,\n//         cartItems: state.cartItems.filter((item) => item.id !== action.payload),\n//       };\n//     case 'PLUS_ONE':\n//       return {\n//         ...state,\n//         cartItems: state.cartItems.map((item) =>\n//           item.id === action.payload ? { ...item, count: item.count + 1 } : item\n//         ),\n//       };\n//     case 'MINUS_ONE':\n//       return {\n//         ...state,\n//         cartItems: state.cartItems.map((item) =>\n//           item.id === action.payload && item.count > 1 ? { ...item, count: item.count - 1 } : item\n//         ),\n//       };\n//     case 'LOAD_CART':\n//       return {\n//         ...state,\n//         cartItems: action.payload,\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\n// // Create the CartContext\n// const CartContext = createContext();\n\n// // Create the CartProvider component\n// export const CartProvider = ({ children }) => {\n//   const [state, dispatch] = useReducer(cartReducer, initialCartState);\n\n//   // Load data from local storage on component mount\n//   useEffect(() => {\n//     const savedCart = localStorage.getItem('cart');\n//     if (savedCart) {\n//       dispatch({ type: 'LOAD_CART', payload: JSON.parse(savedCart) });\n//     }\n//   }, []); // Empty dependency array to run only once on mount\n\n//   // Save data to local storage whenever cartItems change\n//   useEffect(() => {\n//     localStorage.setItem('cart', JSON.stringify(state.cartItems));\n//   }, [state.cartItems]);\n\n//   const addToCart = (item) => {\n//     dispatch({ type: 'ADD_TO_CART', payload: item });\n//   };\n\n//   const updateQuantity = (id, count) => {\n//     dispatch({ type: 'UPDATE_QUANTITY', payload: { id, count } });\n//   };\n\n//   const removeFromCart = (id) => {\n//     dispatch({ type: 'REMOVE_FROM_CART', payload: id });\n//   };\n\n//   const handlePlus = (id) => {\n//     dispatch({ type: 'PLUS_ONE', payload: id });\n//   };\n\n//   const handleMinus = (id) => {\n//     dispatch({ type: 'MINUS_ONE', payload: id });\n//   };\n\n//   return (\n//     <CartContext.Provider\n//       value={{\n//         cartItems: state.cartItems,\n//         addToCart,\n//         updateQuantity,\n//         removeFromCart,\n//         handlePlus,\n//         handleMinus\n//       }}\n//     >\n//       {children}\n//     </CartContext.Provider>\n//   );\n// };\n\n// // Create a custom hook to use the CartContext\n// export const useCart = () => {\n//   return useContext(CartContext);\n// };\n\n// import React, { createContext, useContext, useReducer, useEffect } from 'react';\n\n// // Define the initial state for the cart\n// const initialCartState = {\n//   cartItems: [],\n// };\n\n// // Define actions to manipulate the cart state\n// const cartReducer = (state, action) => {\n//   switch (action.type) {\n//     case 'ADD_TO_CART':\n//       return {\n//         ...state,\n//         cartItems: [...state.cartItems, action.payload],\n//       };\n//     case 'UPDATE_QUANTITY':\n//       return {\n//         ...state,\n//         cartItems: state.cartItems.map((item) =>\n//           item.id === action.payload.id\n//             ? { ...item, count: action.payload.count }\n//             : item\n//         ),\n//       };\n//     case 'REMOVE_FROM_CART':\n//       return {\n//         ...state,\n//         cartItems: state.cartItems.filter((item) => item.id !== action.payload),\n//       };\n//     case 'PLUS_ONE':\n//       return {\n//         ...state,\n//         cartItems: state.cartItems.map((item) =>\n//           item.id === action.payload ? { ...item, count: item.count + 1 } : item\n//         ),\n//       };\n//     case 'MINUS_ONE':\n//       return {\n//         ...state,\n//         cartItems: state.cartItems.map((item) =>\n//           item.id === action.payload && item.count > 1 ? { ...item, count: item.count - 1 } : item\n//         ),\n//       };\n//     case 'LOAD_CART':\n//       return {\n//         ...state,\n//         cartItems: action.payload,\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\n// // Create the CartContext\n// const CartContext = createContext();\n\n// // Create the CartProvider component\n// export const CartProvider = ({ children }) => {\n//   const [state, dispatch] = useReducer(cartReducer, initialCartState);\n\n//   // Load data from local storage on component mount\n//   useEffect(() => {\n//     const savedCart = localStorage.getItem('cart');\n//     if (savedCart) {\n//       dispatch({ type: 'LOAD_CART', payload: JSON.parse(savedCart) });\n//     }\n//   }, []);\n\n//   // Save data to local storage whenever cartItems change\n//   useEffect(() => {\n//     localStorage.setItem('cart', JSON.stringify(state.cartItems));\n//   }, [state.cartItems]);\n\n//   const apiUrl = 'http://localhost:5120/api/Cart';\n\n//   const addToCart = async (item) => {\n//     try {\n//       const response = await fetch(apiUrl, {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//           // Add any authentication headers if needed\n//         },\n//         body: JSON.stringify(item),\n//       });\n\n//       if (response.ok) {\n//         // Item added successfully to the backend, now update the local state\n//         dispatch({ type: 'ADD_TO_CART', payload: item });\n//       } else {\n//         console.error('Failed to add item to cart');\n//       }\n//     } catch (error) {\n//       console.error('Network error while adding item to cart', error);\n//     }\n//   };\n\n//   // Add similar API calls for other actions (updateQuantity, removeFromCart, handlePlus, handleMinus)\n\n//   return (\n//     <CartContext.Provider\n//       value={{\n//         cartItems: state.cartItems,\n//         addToCart,\n//         // Add other action functions here\n//       }}\n//     >\n//       {children}\n//     </CartContext.Provider>\n//   );\n// };\n\n// // Create a custom hook to use the CartContext\n// export const useCart = () => {\n//   return useContext(CartContext);\n// };\n\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nconst cartReducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_TO_CART':\n      return [...state, action.payload];\n    case 'REMOVE_FROM_CART':\n      return state.filter(item => item.id !== action.payload);\n    default:\n      return state;\n  }\n};\nconst CartProvider = ({\n  children\n}) => {\n  _s();\n  const [cartItems, dispatch] = useReducer(cartReducer, [], initial => {\n    // Load cart items from local storage on initial render\n    const storedCart = localStorage.getItem('cart');\n    return storedCart ? JSON.parse(storedCart) : initial;\n  });\n\n  // Update local storage whenever the cart items change\n  useEffect(() => {\n    localStorage.setItem('cart', JSON.stringify(cartItems));\n  }, [cartItems]);\n  const addToCart = product => {\n    dispatch({\n      type: 'ADD_TO_CART',\n      payload: product\n    });\n  };\n  const removeFromCart = productId => {\n    dispatch({\n      type: 'REMOVE_FROM_CART',\n      payload: productId\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cartItems,\n      addToCart,\n      removeFromCart\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 281,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"DYCAM0GA7WL6gjUdExNEYCXW5Us=\");\n_c = CartProvider;\nconst useCart = () => {\n  _s2();\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n};\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport { CartProvider, useCart };\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","jsxDEV","_jsxDEV","CartContext","cartReducer","state","action","type","payload","filter","item","id","CartProvider","children","_s","cartItems","dispatch","initial","storedCart","localStorage","getItem","JSON","parse","setItem","stringify","addToCart","product","removeFromCart","productId","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/sbhagwanshinde/Desktop/mini proj/my-app/src/components/CartContext.js"],"sourcesContent":["\r\n// import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\n\r\n// // Define the initial state for the cart\r\n// const initialCartState = {\r\n//   cartItems: [],\r\n// };\r\n\r\n// // Define actions to manipulate the cart state\r\n// const cartReducer = (state, action) => {\r\n//   switch (action.type) {\r\n//     case 'ADD_TO_CART':\r\n//       return {\r\n//         ...state,\r\n//         cartItems: [...state.cartItems, action.payload],\r\n//       };\r\n//     case 'UPDATE_QUANTITY':\r\n//       return {\r\n//         ...state,\r\n//         cartItems: state.cartItems.map((item) =>\r\n//           item.id === action.payload.id\r\n//             ? { ...item, count: action.payload.count }\r\n//             : item\r\n//         ),\r\n//       };\r\n//     case 'REMOVE_FROM_CART':\r\n//       return {\r\n//         ...state,\r\n//         cartItems: state.cartItems.filter((item) => item.id !== action.payload),\r\n//       };\r\n//     case 'PLUS_ONE':\r\n//       return {\r\n//         ...state,\r\n//         cartItems: state.cartItems.map((item) =>\r\n//           item.id === action.payload ? { ...item, count: item.count + 1 } : item\r\n//         ),\r\n//       };\r\n//     case 'MINUS_ONE':\r\n//       return {\r\n//         ...state,\r\n//         cartItems: state.cartItems.map((item) =>\r\n//           item.id === action.payload && item.count > 1 ? { ...item, count: item.count - 1 } : item\r\n//         ),\r\n//       };\r\n//     case 'LOAD_CART':\r\n//       return {\r\n//         ...state,\r\n//         cartItems: action.payload,\r\n//       };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// // Create the CartContext\r\n// const CartContext = createContext();\r\n\r\n// // Create the CartProvider component\r\n// export const CartProvider = ({ children }) => {\r\n//   const [state, dispatch] = useReducer(cartReducer, initialCartState);\r\n\r\n//   // Load data from local storage on component mount\r\n//   useEffect(() => {\r\n//     const savedCart = localStorage.getItem('cart');\r\n//     if (savedCart) {\r\n//       dispatch({ type: 'LOAD_CART', payload: JSON.parse(savedCart) });\r\n//     }\r\n//   }, []); // Empty dependency array to run only once on mount\r\n\r\n//   // Save data to local storage whenever cartItems change\r\n//   useEffect(() => {\r\n//     localStorage.setItem('cart', JSON.stringify(state.cartItems));\r\n//   }, [state.cartItems]);\r\n\r\n//   const addToCart = (item) => {\r\n//     dispatch({ type: 'ADD_TO_CART', payload: item });\r\n//   };\r\n\r\n//   const updateQuantity = (id, count) => {\r\n//     dispatch({ type: 'UPDATE_QUANTITY', payload: { id, count } });\r\n//   };\r\n\r\n//   const removeFromCart = (id) => {\r\n//     dispatch({ type: 'REMOVE_FROM_CART', payload: id });\r\n//   };\r\n\r\n//   const handlePlus = (id) => {\r\n//     dispatch({ type: 'PLUS_ONE', payload: id });\r\n//   };\r\n\r\n//   const handleMinus = (id) => {\r\n//     dispatch({ type: 'MINUS_ONE', payload: id });\r\n//   };\r\n\r\n//   return (\r\n//     <CartContext.Provider\r\n//       value={{\r\n//         cartItems: state.cartItems,\r\n//         addToCart,\r\n//         updateQuantity,\r\n//         removeFromCart,\r\n//         handlePlus,\r\n//         handleMinus\r\n//       }}\r\n//     >\r\n//       {children}\r\n//     </CartContext.Provider>\r\n//   );\r\n// };\r\n\r\n// // Create a custom hook to use the CartContext\r\n// export const useCart = () => {\r\n//   return useContext(CartContext);\r\n// };\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\n\r\n// // Define the initial state for the cart\r\n// const initialCartState = {\r\n//   cartItems: [],\r\n// };\r\n\r\n// // Define actions to manipulate the cart state\r\n// const cartReducer = (state, action) => {\r\n//   switch (action.type) {\r\n//     case 'ADD_TO_CART':\r\n//       return {\r\n//         ...state,\r\n//         cartItems: [...state.cartItems, action.payload],\r\n//       };\r\n//     case 'UPDATE_QUANTITY':\r\n//       return {\r\n//         ...state,\r\n//         cartItems: state.cartItems.map((item) =>\r\n//           item.id === action.payload.id\r\n//             ? { ...item, count: action.payload.count }\r\n//             : item\r\n//         ),\r\n//       };\r\n//     case 'REMOVE_FROM_CART':\r\n//       return {\r\n//         ...state,\r\n//         cartItems: state.cartItems.filter((item) => item.id !== action.payload),\r\n//       };\r\n//     case 'PLUS_ONE':\r\n//       return {\r\n//         ...state,\r\n//         cartItems: state.cartItems.map((item) =>\r\n//           item.id === action.payload ? { ...item, count: item.count + 1 } : item\r\n//         ),\r\n//       };\r\n//     case 'MINUS_ONE':\r\n//       return {\r\n//         ...state,\r\n//         cartItems: state.cartItems.map((item) =>\r\n//           item.id === action.payload && item.count > 1 ? { ...item, count: item.count - 1 } : item\r\n//         ),\r\n//       };\r\n//     case 'LOAD_CART':\r\n//       return {\r\n//         ...state,\r\n//         cartItems: action.payload,\r\n//       };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// // Create the CartContext\r\n// const CartContext = createContext();\r\n\r\n// // Create the CartProvider component\r\n// export const CartProvider = ({ children }) => {\r\n//   const [state, dispatch] = useReducer(cartReducer, initialCartState);\r\n\r\n//   // Load data from local storage on component mount\r\n//   useEffect(() => {\r\n//     const savedCart = localStorage.getItem('cart');\r\n//     if (savedCart) {\r\n//       dispatch({ type: 'LOAD_CART', payload: JSON.parse(savedCart) });\r\n//     }\r\n//   }, []);\r\n\r\n//   // Save data to local storage whenever cartItems change\r\n//   useEffect(() => {\r\n//     localStorage.setItem('cart', JSON.stringify(state.cartItems));\r\n//   }, [state.cartItems]);\r\n\r\n//   const apiUrl = 'http://localhost:5120/api/Cart';\r\n\r\n//   const addToCart = async (item) => {\r\n//     try {\r\n//       const response = await fetch(apiUrl, {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//           // Add any authentication headers if needed\r\n//         },\r\n//         body: JSON.stringify(item),\r\n//       });\r\n\r\n//       if (response.ok) {\r\n//         // Item added successfully to the backend, now update the local state\r\n//         dispatch({ type: 'ADD_TO_CART', payload: item });\r\n//       } else {\r\n//         console.error('Failed to add item to cart');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Network error while adding item to cart', error);\r\n//     }\r\n//   };\r\n\r\n//   // Add similar API calls for other actions (updateQuantity, removeFromCart, handlePlus, handleMinus)\r\n\r\n//   return (\r\n//     <CartContext.Provider\r\n//       value={{\r\n//         cartItems: state.cartItems,\r\n//         addToCart,\r\n//         // Add other action functions here\r\n//       }}\r\n//     >\r\n//       {children}\r\n//     </CartContext.Provider>\r\n//   );\r\n// };\r\n\r\n// // Create a custom hook to use the CartContext\r\n// export const useCart = () => {\r\n//   return useContext(CartContext);\r\n// };\r\n\r\n\r\n\r\n\r\n\r\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\r\n\r\nconst CartContext = createContext();\r\n\r\nconst cartReducer = (state, action) => {\r\n    switch (action.type) {\r\n      case 'ADD_TO_CART':\r\n        return [...state, action.payload];\r\n  \r\n      case 'REMOVE_FROM_CART':\r\n        return state.filter(item => item.id !== action.payload);\r\n  \r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  \r\n\r\nconst CartProvider = ({ children }) => {\r\n  const [cartItems, dispatch] = useReducer(cartReducer, [], (initial) => {\r\n    // Load cart items from local storage on initial render\r\n    const storedCart = localStorage.getItem('cart');\r\n    return storedCart ? JSON.parse(storedCart) : initial;\r\n  });\r\n\r\n  // Update local storage whenever the cart items change\r\n  useEffect(() => {\r\n    localStorage.setItem('cart', JSON.stringify(cartItems));\r\n  }, [cartItems]);\r\n\r\n  const addToCart = (product) => {\r\n    dispatch({ type: 'ADD_TO_CART', payload: product });\r\n  };\r\n\r\n  const removeFromCart = (productId) => {\r\n    dispatch({ type: 'REMOVE_FROM_CART', payload: productId });\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={{ cartItems, addToCart, removeFromCart }}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nconst useCart = () => {\r\n  const context = useContext(CartContext);\r\n  if (!context) {\r\n    throw new Error('useCart must be used within a CartProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport { CartProvider, useCart };\r\n"],"mappingsaAAa,EAAEC,UAAU,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhF,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,MAAMO,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACnC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,aAAa;MAChB,OAAO,CAAC,GAAGF,KAAK,EAAEC,MAAM,CAACE,OAAO,CAAC;IAEnC,KAAK,kBAAkB;MACrB,OAAOH,KAAK,CAACI,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKL,MAAM,CAACE,OAAO,CAAC;IAEzD;MACE,OAAOH,KAAK;EAChB;AACF,CAAC;AAGH,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,SAAS,EAAEC,QAAQ,CAAC,GAAGjB,UAAU,CAACK,WAAW,EAAE,EAAE,EAAGa,OAAO,IAAK;IACrE;IACA,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/C,OAAOF,UAAU,GAAGG,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,GAAGD,OAAO;EACtD,CAAC,CAAC;;EAEF;EACAjB,SAAS,CAAC,MAAM;IACdmB,YAAY,CAACI,OAAO,CAAC,MAAM,EAAEF,IAAI,CAACG,SAAS,CAACT,SAAS,CAAC,CAAC;EACzD,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;EAEf,MAAMU,SAAS,GAAIC,OAAO,IAAK;IAC7BV,QAAQ,CAAC;MAAET,IAAI,EAAE,aAAa;MAAEC,OAAO,EAAEkB;IAAQ,CAAC,CAAC;EACrD,CAAC;EAED,MAAMC,cAAc,GAAIC,SAAS,IAAK;IACpCZ,QAAQ,CAAC;MAAET,IAAI,EAAE,kBAAkB;MAAEC,OAAO,EAAEoB;IAAU,CAAC,CAAC;EAC5D,CAAC;EAED,oBACE1B,OAAA,CAACC,WAAW,CAAC0B,QAAQ;IAACC,KAAK,EAAE;MAAEf,SAAS;MAAEU,SAAS;MAAEE;IAAe,CAAE;IAAAd,QAAA,EACnEA;EAAQ;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACpB,EAAA,CAzBIF,YAAY;AAAAuB,EAAA,GAAZvB,YAAY;AA2BlB,MAAMwB,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACpB,MAAMC,OAAO,GAAGxC,UAAU,CAACK,WAAW,CAAC;EACvC,IAAI,CAACmC,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANID,OAAO;AAQb,SAASxB,YAAY,EAAEwB,OAAO;AAAG,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}